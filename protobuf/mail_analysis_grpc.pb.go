// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.11
// source: protobuf/mail_analysis.proto

package ___

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MailAnalysisClient is the client API for MailAnalysis service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailAnalysisClient interface {
	SimpleProcedure(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
	HashProcedure(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error)
}

type mailAnalysisClient struct {
	cc grpc.ClientConnInterface
}

func NewMailAnalysisClient(cc grpc.ClientConnInterface) MailAnalysisClient {
	return &mailAnalysisClient{cc}
}

func (c *mailAnalysisClient) SimpleProcedure(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/main.MailAnalysis/SimpleProcedure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailAnalysisClient) HashProcedure(ctx context.Context, in *SimpleRequest, opts ...grpc.CallOption) (*SimpleResponse, error) {
	out := new(SimpleResponse)
	err := c.cc.Invoke(ctx, "/main.MailAnalysis/HashProcedure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailAnalysisServer is the server API for MailAnalysis service.
// All implementations must embed UnimplementedMailAnalysisServer
// for forward compatibility
type MailAnalysisServer interface {
	SimpleProcedure(context.Context, *SimpleRequest) (*SimpleResponse, error)
	HashProcedure(context.Context, *SimpleRequest) (*SimpleResponse, error)
	mustEmbedUnimplementedMailAnalysisServer()
}

// UnimplementedMailAnalysisServer must be embedded to have forward compatible implementations.
type UnimplementedMailAnalysisServer struct {
}

func (UnimplementedMailAnalysisServer) SimpleProcedure(context.Context, *SimpleRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimpleProcedure not implemented")
}
func (UnimplementedMailAnalysisServer) HashProcedure(context.Context, *SimpleRequest) (*SimpleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HashProcedure not implemented")
}
func (UnimplementedMailAnalysisServer) mustEmbedUnimplementedMailAnalysisServer() {}

// UnsafeMailAnalysisServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailAnalysisServer will
// result in compilation errors.
type UnsafeMailAnalysisServer interface {
	mustEmbedUnimplementedMailAnalysisServer()
}

func RegisterMailAnalysisServer(s grpc.ServiceRegistrar, srv MailAnalysisServer) {
	s.RegisterService(&MailAnalysis_ServiceDesc, srv)
}

func _MailAnalysis_SimpleProcedure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailAnalysisServer).SimpleProcedure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.MailAnalysis/SimpleProcedure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailAnalysisServer).SimpleProcedure(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailAnalysis_HashProcedure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailAnalysisServer).HashProcedure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.MailAnalysis/HashProcedure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailAnalysisServer).HashProcedure(ctx, req.(*SimpleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MailAnalysis_ServiceDesc is the grpc.ServiceDesc for MailAnalysis service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailAnalysis_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.MailAnalysis",
	HandlerType: (*MailAnalysisServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SimpleProcedure",
			Handler:    _MailAnalysis_SimpleProcedure_Handler,
		},
		{
			MethodName: "HashProcedure",
			Handler:    _MailAnalysis_HashProcedure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/mail_analysis.proto",
}
